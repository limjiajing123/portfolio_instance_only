name: Build and Deploy to EC2

on:
  push:
    branches:
      - main  # Run workflow when pushing to main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout source code
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Configure AWS credentials (needed for ECR)
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      # 3. Login to ECR
      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ap-southeast-1 \
            | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com

      # 4. Build and Push Backend
      - name: Build and Push Backend Docker Image
        run: |
          docker build -t portfolio-backend ./backend
          docker tag portfolio-backend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/instancebackend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/instancebackend:latest

      # 5. Build and Push Frontend
      - name: Build and Push Frontend Docker Image
        run: |
          docker build -t portfolio-frontend ./frontend
          docker tag portfolio-frontend:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/instancefrontend:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.ap-southeast-1.amazonaws.com/instancefrontend:latest

      # 6. SSH into EC2 and run deploy.sh
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu # or ubuntu depending on AMI
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            chmod +x ~/deploy.sh
            ~/deploy.sh

      # 7. Post-deployment health check
      - name: Verify Frontend is live
        run: |
          for i in {1..15}; do
            if curl -s --fail http://${{ secrets.EC2_HOST }}:82 > /dev/null; then
              echo "Frontend is live!"
              exit 0
            fi
            echo "Waiting for frontend..."
            sleep 5
          done
          echo "Frontend failed to come online!"
          exit 1

      - name: Verify Backend is live
        run: |
          for i in {1..15}; do
            if curl -s --fail http://${{ secrets.EC2_HOST }}:5000/health > /dev/null; then
              echo "Backend is live!"
              exit 0
            fi
            echo "Waiting for backend..."
            sleep 5
          done
          echo "Backend failed to come online!"
          exit 1

